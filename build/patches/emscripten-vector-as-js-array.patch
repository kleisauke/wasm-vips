From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Fri, 31 Jul 2020 13:01:10 +0200
Subject: [PATCH 1/1] Convert arithmetic vectors into JS arrays and vice versa

See: #11070.

Upstream-Status: Pending

diff --git a/src/embind/embind.js b/src/embind/embind.js
index 1111111..2222222 100644
--- a/src/embind/embind.js
+++ b/src/embind/embind.js
@@ -412,6 +412,36 @@ var LibraryEmbind = {
     return array;
   },
 
+  $getFloatHeap__deps: [],
+  $getFloatHeap: function (name, shift) {
+    switch (shift) {
+      case 2:
+        return HEAPF32;
+      case 3:
+        return HEAPF64;
+      default:
+        throw new TypeError("Unknown float type: " + name);
+    }
+  },
+
+  $getIntegerHeap__deps: [],
+  $getIntegerHeap: function (name, shift, signed) {
+    switch (shift) {
+      case 0:
+        return signed ? HEAP8 : HEAPU8;
+      case 1:
+        return signed ? HEAP16 : HEAPU16;
+      case 2:
+        return signed ? HEAP32 : HEAPU32;
+#if WASM_BIGINT
+      case 3:
+        return signed ? HEAP64 : HEAPU64;
+#endif
+      default:
+        throw new TypeError("Unknown integer type: " + name);
+    }
+  },
+
   $requireRegisteredType__deps: [
     '$registeredTypes', '$getTypeName', '$throwBindingError'],
   $requireRegisteredType: function(rawType, humanName) {
@@ -442,7 +472,7 @@ var LibraryEmbind = {
 
   _embind_register_bool__sig: 'vpppii',
   _embind_register_bool__deps: [
-    '$getShiftFromSize', '$readLatin1String', '$registerType'],
+    '$getShiftFromSize', '$readLatin1String', '$registerType', '$getIntegerHeap'],
   _embind_register_bool: function(rawType, name, size, trueValue, falseValue) {
     var shift = getShiftFromSize(size);
 
@@ -460,16 +490,7 @@ var LibraryEmbind = {
         'argPackAdvance': 8,
         'readValueFromPointer': function(pointer) {
             // TODO: if heap is fixed (like in asm.js) this could be executed outside
-            var heap;
-            if (size === 1) {
-                heap = HEAP8;
-            } else if (size === 2) {
-                heap = HEAP16;
-            } else if (size === 4) {
-                heap = HEAP32;
-            } else {
-                throw new TypeError("Unknown boolean type size: " + name);
-            }
+            var heap = getIntegerHeap(name, shift, true);
             return this['fromWireType'](heap[pointer >> shift]);
         },
         destructorFunction: null, // This type does not need a destructor
@@ -488,60 +509,57 @@ var LibraryEmbind = {
     }
   },
 
-  $integerReadValueFromPointer__deps: [],
+  $integerReadValueFromPointer__deps: ['$getIntegerHeap'],
   $integerReadValueFromPointer: function(name, shift, signed) {
+    var heap = getIntegerHeap(name, shift, signed);
+
     // integers are quite common, so generate very specialized functions
     switch (shift) {
-        case 0: return signed ?
-            function readS8FromPointer(pointer) { return HEAP8[pointer]; } :
-            function readU8FromPointer(pointer) { return HEAPU8[pointer]; };
-        case 1: return signed ?
-            function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :
-            function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };
-        case 2: return signed ?
-            function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :
-            function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };
+        case 0: return function(pointer) {
+            return heap[pointer];
+        };
+        case 1: return function(pointer) {
+            return heap[pointer >> 1];
+        };
+        case 2: return function(pointer) {
+            return heap[pointer >> 2];
+        };
 #if WASM_BIGINT
-        case 3: return signed ?
-            function readS64FromPointer(pointer) { return HEAP64[pointer >> 3]; } :
-            function readU64FromPointer(pointer) { return HEAPU64[pointer >> 3]; };
+        case 3: return function(pointer) {
+            return heap[pointer >> 3];
+        };
 #endif
-        default:
-            throw new TypeError("Unknown integer type: " + name);
     }
   },
 
-  $enumReadValueFromPointer__deps: [],
+  $enumReadValueFromPointer__deps: ['$getIntegerHeap'],
   $enumReadValueFromPointer: function(name, shift, signed) {
+    var heap = getIntegerHeap(name, shift, signed);
+
     switch (shift) {
         case 0: return function(pointer) {
-            var heap = signed ? HEAP8 : HEAPU8;
             return this['fromWireType'](heap[pointer]);
         };
         case 1: return function(pointer) {
-            var heap = signed ? HEAP16 : HEAPU16;
             return this['fromWireType'](heap[pointer >> 1]);
         };
         case 2: return function(pointer) {
-            var heap = signed ? HEAP32 : HEAPU32;
             return this['fromWireType'](heap[pointer >> 2]);
         };
-        default:
-            throw new TypeError("Unknown integer type: " + name);
     }
   },
 
-  $floatReadValueFromPointer__deps: [],
+  $floatReadValueFromPointer__deps: ['$getFloatHeap'],
   $floatReadValueFromPointer: function(name, shift) {
+    var heap = getFloatHeap(name, shift);
+
     switch (shift) {
         case 2: return function(pointer) {
-            return this['fromWireType'](HEAPF32[pointer >> 2]);
+            return this['fromWireType'](heap[pointer >> 2]);
         };
         case 3: return function(pointer) {
-            return this['fromWireType'](HEAPF64[pointer >> 3]);
+            return this['fromWireType'](heap[pointer >> 3]);
         };
-        default:
-            throw new TypeError("Unknown float type: " + name);
     }
   },
 
@@ -568,7 +586,7 @@ var LibraryEmbind = {
         fromWireType = (value) => (value << bitshift) >>> bitshift;
     }
 
-    var isUnsignedType = (name.includes('unsigned'));
+    var isUnsignedType = name.includes('unsigned');
     var checkAssertions = (value, toTypeName) => {
 #if ASSERTIONS
       if (typeof value != "number" && typeof value != "boolean") {
@@ -612,7 +630,7 @@ var LibraryEmbind = {
 
     var shift = getShiftFromSize(size);
 
-    var isUnsignedType = (name.indexOf('u') != -1);
+    var isUnsignedType = name.includes('u');
 
     // maxRange comes through as -1 for uint64_t (see issue 13902). Work around that temporarily
     if (isUnsignedType) {
@@ -784,6 +802,7 @@ var LibraryEmbind = {
   _embind_register_std_wstring__sig: 'vppp',
   _embind_register_std_wstring__deps: [
     '$readLatin1String', '$registerType', '$simpleReadValueFromPointer',
+    '$getIntegerHeap',
     '$UTF16ToString', '$stringToUTF16', '$lengthBytesUTF16',
     '$UTF32ToString', '$stringToUTF32', '$lengthBytesUTF32',
     ],
@@ -789,18 +808,16 @@ var LibraryEmbind = {
     ],
   _embind_register_std_wstring: function(rawType, charSize, name) {
     name = readLatin1String(name);
-    var decodeString, encodeString, getHeap, lengthBytesUTF, shift;
+    var decodeString, encodeString, lengthBytesUTF, shift;
     if (charSize === 2) {
       decodeString = UTF16ToString;
       encodeString = stringToUTF16;
       lengthBytesUTF = lengthBytesUTF16;
-      getHeap = () => HEAPU16;
       shift = 1;
     } else if (charSize === 4) {
       decodeString = UTF32ToString;
       encodeString = stringToUTF32;
       lengthBytesUTF = lengthBytesUTF32;
-      getHeap = () => HEAPU32;
       shift = 2;
     }
     registerType(rawType, {
@@ -808,7 +825,7 @@ var LibraryEmbind = {
       'fromWireType': function(value) {
         // Code mostly taken from _embind_register_std_string fromWireType
         var length = HEAPU32[value >> 2];
-        var HEAP = getHeap();
+        var HEAP = getIntegerHeap(name, shift, false);
         var str;
 
         var decodeStartPtr = value + 4;
@@ -883,6 +900,71 @@ var LibraryEmbind = {
     });
   },
 
+  _embind_register_arithmetic_vector__deps: [
+    '$readLatin1String', '$registerType', '$getShiftFromSize', '$getFloatHeap',
+    '$getIntegerHeap', '$simpleReadValueFromPointer', '$throwBindingError'],
+  _embind_register_arithmetic_vector: function (rawType, name, size, isfloat, signed) {
+    name = readLatin1String(name);
+    var shift = getShiftFromSize(size);
+
+    registerType(rawType, {
+      name: name,
+      'fromWireType': function (value) {
+        // Code mostly taken from _embind_register_std_string fromWireType
+        var length = HEAPU32[value >> 2];
+        var HEAP = isfloat ?
+        getFloatHeap(name, shift) :
+        getIntegerHeap(name, shift, signed);
+
+        var a = new Array(length);
+        var firstElement = value + size;
+        for (var i = 0; i < length; ++i) {
+          a[i] = HEAP[(firstElement >> shift) + i];
+        }
+
+        _free(value);
+
+        return a;
+      },
+      'toWireType': function (destructors, value) {
+        // We allow singular values as well
+        if (typeof value == 'number') {
+          value = [value];
+        }
+
+        if (!Array.isArray(value)) {
+          throwBindingError('Cannot pass non-array to C++ vector type ' + name);
+        }
+
+        // flatten 2D arrays
+        value = Array.prototype.concat.apply([], value);
+
+        var length = value.length;
+        var HEAP = isfloat ?
+          getFloatHeap(name, shift) :
+          getIntegerHeap(name, shift, signed);
+        var ptr = _malloc(size + length * size);
+#if CAN_ADDRESS_2GB
+        ptr >>>= 0;
+#endif
+
+        HEAPU32[ptr >> 2] = length;
+        var firstElement = ptr + size;
+        for (var i = 0; i < length; ++i) {
+          HEAP[(firstElement >> shift) + i] = value[i];
+        }
+
+        if (destructors !== null) {
+          destructors.push(_free, ptr);
+        }
+        return ptr;
+      },
+      'argPackAdvance': 8,
+      'readValueFromPointer': simpleReadValueFromPointer,
+      destructorFunction: function (ptr) { _free(ptr); },
+    });
+  },
+
   _embind_register_memory_view__sig: 'vpip',
   _embind_register_memory_view__deps: ['$readLatin1String', '$registerType'],
   _embind_register_memory_view: function(rawType, dataTypeIndex, name) {
diff --git a/system/include/emscripten/bind.h b/system/include/emscripten/bind.h
index 1111111..2222222 100644
--- a/system/include/emscripten/bind.h
+++ b/system/include/emscripten/bind.h
@@ -87,6 +87,13 @@ namespace emscripten {
     size_t charSize,
     const char* name);
 
+void _embind_register_arithmetic_vector(
+    TYPEID vectorType,
+    const char *name,
+    size_t size,
+    bool isFloat,
+    bool isSigned);
+
 void _embind_register_emval(
     TYPEID emvalType,
     const char* name);
@@ -1827,7 +1834,8 @@ namespace emscripten {
 } // end namespace internal
 
 template<typename T>
-class_<std::vector<T>> register_vector(const char* name) {
+typename std::enable_if<!std::is_arithmetic<T>::value, class_<std::vector<T>>>::type
+register_vector(const char* name) {
     typedef std::vector<T> VecType;
 
     void (VecType::*push_back)(const T&) = &VecType::push_back;
@@ -1843,6 +1851,17 @@ namespace emscripten {
         ;
 }
 
+template<typename T>
+typename std::enable_if<std::is_arithmetic<T>::value, void>::type
+register_vector(const char* name) {
+    internal::_embind_register_arithmetic_vector(
+        internal::TypeID<std::vector<T>>::get(),
+        name,
+        sizeof(T),
+        std::is_floating_point<T>::value,
+        std::is_signed<T>::value);
+}
+
 ////////////////////////////////////////////////////////////////////////////////
 // MAPS
 ////////////////////////////////////////////////////////////////////////////////
diff --git a/system/include/emscripten/wire.h b/system/include/emscripten/wire.h
index 1111111..2222222 100644
--- a/system/include/emscripten/wire.h
+++ b/system/include/emscripten/wire.h
@@ -288,9 +288,9 @@ namespace emscripten {
 };
 
 template<typename T>
-struct BindingType<std::basic_string<T>> {
+struct BindingType<std::basic_string<T>,
+  typename std::enable_if<std::is_trivially_copyable<T>::value>::type> {
     using String = std::basic_string<T>;
-    static_assert(std::is_trivially_copyable<T>::value, "basic_string elements are memcpy'd");
     typedef struct {
         size_t length;
         T data[1]; // trailing data
@@ -306,6 +306,28 @@ namespace emscripten {
     }
 };
 
+template<typename T>
+struct BindingType<std::vector<T>,
+  typename std::enable_if<std::is_arithmetic<T>::value>::type> {
+    using Vector = std::vector<T>;
+    struct VectorStruct {
+        size_t length;
+        T data[]; // Flexible array member
+    };
+    using WireType = VectorStruct *;
+
+    static WireType toWireType(const Vector& v) {
+        WireType wt =
+          (WireType)malloc(offsetof(struct VectorStruct, data) + v.size() * sizeof(T));
+        wt->length = v.size();
+        std::copy(v.begin(), v.end(), wt->data);
+        return wt;
+    }
+    static Vector fromWireType(WireType v) {
+        return Vector(v->data, v->data + v->length);
+    }
+};
+
 template<typename T>
 struct BindingType<const T> : public BindingType<T> {
 };
